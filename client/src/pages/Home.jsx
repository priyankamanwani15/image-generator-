import React, { useState, useEffect } from "react";
import { Card, FormField, Loader } from "../components";

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }

  return <h2 className="mt-5 font-bold text-red-500 text-xl ">{title}</h2>;
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allposts, setAllposts] = useState(null);
  const [searchText, setSearchText] = useState("");
  const [searchedResults, setSearchedResults] = useState(null);
  const [searchTimeout, setSearchTimeout] = useState(null);

  const GreetArray = ["Innovation", "Vision", "Creativity", "Imagination"];
  const [greet, setGreet] = useState(GreetArray[0]); // Initialize with the first greeting
  const [index, setIndex] = useState(0);

  useEffect(() => {
    const intervalId = setInterval(() => {
      setIndex((prevIndex) => (prevIndex + 1) % GreetArray.length);
    }, 1000);

    return () => clearInterval(intervalId);
  }, []);

  const fetchPosts = async () => {
    setLoading(true);
    try {
      const response = await fetch(
        "https://image-generator-lpp2.onrender.com/api/v1/post",
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        }
      );

      if (response.ok) {
        const result = await response.json();

        setAllposts(result.data.reverse());
      }
    } catch (error) {
      alert(error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    setLoading(true);

    fetchPosts();
  }, []);

  useEffect(() => {
    setGreet(GreetArray[index]);
  }, [index]);

  const getStyleForGreet = (greet) => {
    switch (greet) {
      case "Creativity":
        return "text-blue-800  uppercase text-2xl "; // Example style for 'Skills'
      case "Vision":
        return "text-pink-600  uppercase text-2xl "; // Example style for 'Creativity'
      case "Imagination":
        return "text-purple-800  uppercase text-2xl  "; // Example style for 'Problem Solving'
      case "Innovation":
        return "text-purple-500  uppercase text-2xl  "; // Example style for 'Innovation'
      default:
        return ""; // Default style
    }
  };

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    const value = e.target.value;
    setSearchText(value);
    setSearchTimeout(
      setTimeout(() => {
        const searchResults = allposts.filter(
          (item) =>
            item.name.toLowerCase().includes(value.toLowerCase()) ||
            item.prompt.toLowerCase().includes(value.toLowerCase())
        );

        setSearchedResults(searchResults);
      }, 500)
    );
  };
  return (
    <section className="max-w-7xl mx-auto ">
      <div>
        <h1 className="font-extrabold text-[#222328] text-[32px]">
          The Community Showcase:{" "}
          <span className={getStyleForGreet(greet)}>{greet}</span>
        </h1>
        <p className="mt-2 text-[#666e75] text-[16px] max-w-[500px]">
          Browse through a collection of imaginative and visually stunning
          images generated by DALL-E AI
        </p>
      </div>

      <div className="mt-16">
        <FormField
          labelName="search for the post your like"
          type="text"
          name="text"
          placeholder="ex., An Impressionist oil painting"
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-[#666e75] text-xl mb-3">
                Showing Resuls for{" "}
                <span className="text-purple-500 font-bold uppercase">
                  {searchText}
                </span>
                :
              </h2>
            )}

            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                <RenderCards
                  data={searchedResults}
                  title="Oops! Give me another chance to favour you."
                />
              ) : (
                <RenderCards
                  data={allposts}
                  title="No Posts Yet! I will update myself."
                />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;
